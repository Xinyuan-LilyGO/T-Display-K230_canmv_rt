From aca25494459341a57b60fc118473563f9d6dbdb1 Mon Sep 17 00:00:00 2001
From: zhouquan <zhouquan@rt-thread.com>
Date: Sat, 10 Dec 2022 10:40:06 +0800
Subject: [PATCH 2/3] =?UTF-8?q?=E2=9C=A8=20feat(root):=20add=20tests?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 tests/.gitignore                          | 27 +++++++++++++
 tests/openblas_level1/SConscript          | 20 ++++++++++
 tests/openblas_level1/SConstruct          |  8 ++++
 tests/openblas_level1/openblas_level1.cpp | 35 +++++++++++++++++
 tests/openblas_level2/SConscript          | 20 ++++++++++
 tests/openblas_level2/SConstruct          |  8 ++++
 tests/openblas_level2/openblas_level2.cpp | 39 +++++++++++++++++++
 tests/openblas_level3/SConscript          | 20 ++++++++++
 tests/openblas_level3/SConstruct          |  8 ++++
 tests/openblas_level3/openblas_level3.cpp | 46 +++++++++++++++++++++++
 10 files changed, 231 insertions(+)
 create mode 100644 tests/.gitignore
 create mode 100644 tests/openblas_level1/SConscript
 create mode 100644 tests/openblas_level1/SConstruct
 create mode 100644 tests/openblas_level1/openblas_level1.cpp
 create mode 100644 tests/openblas_level2/SConscript
 create mode 100644 tests/openblas_level2/SConstruct
 create mode 100644 tests/openblas_level2/openblas_level2.cpp
 create mode 100644 tests/openblas_level3/SConscript
 create mode 100644 tests/openblas_level3/SConstruct
 create mode 100644 tests/openblas_level3/openblas_level3.cpp

diff --git a/tests/.gitignore b/tests/.gitignore
new file mode 100644
index 00000000..ce94ba62
--- /dev/null
+++ b/tests/.gitignore
@@ -0,0 +1,27 @@
+*.pyc
+*.map
+*.dblite
+*.elf
+*.bin
+*.hex
+*.axf
+*.exe
+*.pdb
+*.idb
+*.ilk
+*.old
+build
+*~
+*.o
+*.obj
+*.bak
+*.dep
+*.lib
+*.a
+*.i
+*.d
+GPUCache
+sdk/
+*.config
+cconfig.h
+root/
diff --git a/tests/openblas_level1/SConscript b/tests/openblas_level1/SConscript
new file mode 100644
index 00000000..a44672ed
--- /dev/null
+++ b/tests/openblas_level1/SConscript
@@ -0,0 +1,20 @@
+# RT-Thread building script for component
+
+from building import *
+
+cwd = GetCurrentDir()
+src = Glob('*.cpp')
+CPPPATH = [cwd, "../install/include"]
+
+CPPDEFINES = [
+    'HAVE_CCONFIG_H',
+]
+group = DefineGroup('openblas_level1',
+                    src,
+                    depend=[''],
+                    CPPPATH=CPPPATH,
+                    CPPDEFINES=CPPDEFINES,
+                    LIBS=['libopenblas'],
+                    LIBPATH=['../install/lib'])
+
+Return('group')
diff --git a/tests/openblas_level1/SConstruct b/tests/openblas_level1/SConstruct
new file mode 100644
index 00000000..fa9ff6a0
--- /dev/null
+++ b/tests/openblas_level1/SConstruct
@@ -0,0 +1,8 @@
+import os
+import sys
+
+# add building.py path
+sys.path = sys.path + [os.path.join('..', '..', '..', '..', 'tools')]
+from building import *
+
+BuildApplication('openblas_level1', 'SConscript', usr_root='../../..')
diff --git a/tests/openblas_level1/openblas_level1.cpp b/tests/openblas_level1/openblas_level1.cpp
new file mode 100644
index 00000000..acb0f5eb
--- /dev/null
+++ b/tests/openblas_level1/openblas_level1.cpp
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2006-2021, RT-Thread Development Team
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Change Logs:
+ * Date           Author       Notes
+ * 2022/11/03     YeC          The first version
+ *
+ * @brief  Test for OpenBLAS
+ */
+
+#include "cblas.h"
+
+#define N 4
+int main(int argc, char **argv)
+{
+    float alpha = 3;
+    float x[4]  = {1.0, 2, 3, 4};
+    /* 1,2,3,4
+     */
+    float y[4]  = {1, 1, 2, 2};
+    /* 1,1,2,2
+     */
+
+    cblas_saxpy(N, alpha, x, 1, y, 1);
+    printf("sscal result: \n");
+    char _s[20] = {0};
+    for (int j = 0; j < N; j++) {
+        sprintf(_s, "%f", y[j]);
+        printf("%s, ", _s);
+    }
+    printf("\n");
+    return 0;
+}
diff --git a/tests/openblas_level2/SConscript b/tests/openblas_level2/SConscript
new file mode 100644
index 00000000..ee37b8bc
--- /dev/null
+++ b/tests/openblas_level2/SConscript
@@ -0,0 +1,20 @@
+# RT-Thread building script for component
+
+from building import *
+
+cwd = GetCurrentDir()
+src = Glob('*.cpp')
+CPPPATH = [cwd, "../install/include"]
+
+CPPDEFINES = [
+    'HAVE_CCONFIG_H',
+]
+group = DefineGroup('openblas_level2',
+                    src,
+                    depend=[''],
+                    CPPPATH=CPPPATH,
+                    CPPDEFINES=CPPDEFINES,
+                    LIBS=['libopenblas'],
+                    LIBPATH=['../install/lib'])
+
+Return('group')
diff --git a/tests/openblas_level2/SConstruct b/tests/openblas_level2/SConstruct
new file mode 100644
index 00000000..07dbc4af
--- /dev/null
+++ b/tests/openblas_level2/SConstruct
@@ -0,0 +1,8 @@
+import os
+import sys
+
+# add building.py path
+sys.path = sys.path + [os.path.join('..', '..', '..', '..', 'tools')]
+from building import *
+
+BuildApplication('openblas_level2', 'SConscript', usr_root='../../../')
diff --git a/tests/openblas_level2/openblas_level2.cpp b/tests/openblas_level2/openblas_level2.cpp
new file mode 100644
index 00000000..dbd82667
--- /dev/null
+++ b/tests/openblas_level2/openblas_level2.cpp
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2006-2021, RT-Thread Development Team
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Change Logs:
+ * Date           Author       Notes
+ * 2022/11/03     YeC          The first version
+ *
+ * @brief  Test for OpenBLAS
+ */
+
+#include "cblas.h"
+int main(int argc, char **argv)
+{
+    float   x[2] = {1.0, 2.0};
+    float   y[3] = {2.0, 1.0, 3.0};
+    float   A[6] = {0};
+    blasint rows = 2, cols = 3;
+    float   alpha = 10;
+    blasint inc_x = 1, inc_y = 1;
+    blasint lda = 2;
+
+    // 矩阵按列优先存储
+    // A <== alpha*x*y' + A （y'表示y的转置）
+    cblas_sger(CblasColMajor, rows, cols, alpha, x, inc_x, y, inc_y, A, lda);
+
+    printf("sger result: \n");
+    char _s[20] = {0};
+    for (int i = 0; i < rows; i++) {
+        for (int j = 0; j < cols; j++) {
+            sprintf(_s, "%f", A[i * cols + j]);
+            printf("%s, ", _s);
+        }
+        printf("\n");
+    }
+    printf("\n");
+    return 0;
+}
diff --git a/tests/openblas_level3/SConscript b/tests/openblas_level3/SConscript
new file mode 100644
index 00000000..e5bd0b1e
--- /dev/null
+++ b/tests/openblas_level3/SConscript
@@ -0,0 +1,20 @@
+# RT-Thread building script for component
+
+from building import *
+
+cwd = GetCurrentDir()
+src = Glob('*.cpp')
+CPPPATH = [cwd, "../install/include"]
+
+CPPDEFINES = [
+    'HAVE_CCONFIG_H',
+]
+group = DefineGroup('openblas_level3',
+                    src,
+                    depend=[''],
+                    CPPPATH=CPPPATH,
+                    CPPDEFINES=CPPDEFINES,
+                    LIBS=['libopenblas'],
+                    LIBPATH=['../install/lib'])
+
+Return('group')
diff --git a/tests/openblas_level3/SConstruct b/tests/openblas_level3/SConstruct
new file mode 100644
index 00000000..a63b7ce5
--- /dev/null
+++ b/tests/openblas_level3/SConstruct
@@ -0,0 +1,8 @@
+import os
+import sys
+
+# add building.py path
+sys.path = sys.path + [os.path.join('..', '..', '..', '..', 'tools')]
+from building import *
+
+BuildApplication('openblas_level3', 'SConscript', usr_root='../../../')
diff --git a/tests/openblas_level3/openblas_level3.cpp b/tests/openblas_level3/openblas_level3.cpp
new file mode 100644
index 00000000..c16d8831
--- /dev/null
+++ b/tests/openblas_level3/openblas_level3.cpp
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2006-2021, RT-Thread Development Team
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ *
+ * Change Logs:
+ * Date           Author       Notes
+ * 2022/11/03     YeC          The first version
+ *
+ * @brief  Test for OpenBLAS
+ */
+
+#include "cblas.h"
+#define M 2
+#define N 2
+#define K 2
+int main(int argc, char **argv)
+{
+    float alpha    = 1;
+    float beta     = 0;
+    int   lda      = K;
+    int   ldb      = N;
+    int   ldc      = N;
+    float A[M * K] = {1, 2, 3, 4};
+    /* 1,2
+     * 3,4
+     */
+    float B[K * N] = {1, 2, 3, 4};
+    /* 1,2
+     * 3,4
+     */
+    float C[M * N];
+    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
+
+    printf("sgemm result: \n");
+    char _s[20] = {0};
+    for (int i = 0; i < M; i++) {
+        for (int j = 0; j < N; j++) {
+            sprintf(_s, "%f", C[i * N + j]);
+            printf("%s, ", _s);
+        }
+        printf("\n");
+    }
+    printf("\n");
+    return 0;
+}
-- 
2.34.1

