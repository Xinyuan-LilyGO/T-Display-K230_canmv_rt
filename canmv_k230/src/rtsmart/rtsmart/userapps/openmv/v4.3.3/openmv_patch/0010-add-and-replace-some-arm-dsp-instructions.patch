From 61dc94ae4ff9f846a1f580c65b0301b716d0b347 Mon Sep 17 00:00:00 2001
From: zhouquan <zhouquan@rt-thread.com>
Date: Fri, 21 Oct 2022 14:03:30 +0800
Subject: [PATCH 10/14] add and replace some arm dsp instructions

---
 src/hal/unix/omvhalmath.h              |   4 +-
 src/omv/alloc/unaligned_memcpy.c       |   3 +-
 src/omv/boards/MAIX3/omv_boardconfig.h |  12 +-
 src/omv/common/mutex.c                 |   5 +
 src/omv/common/trace.c                 |   5 +-
 src/omv/common/usbdbg.c                | 708 ++++++++++++-------------
 src/omv/imlib/apriltag.c               |   4 +-
 src/omv/imlib/imlib.h                  |  56 ++
 src/omv/imlib/kmeans.c                 |   2 +
 9 files changed, 433 insertions(+), 366 deletions(-)

diff --git a/src/hal/unix/omvhalmath.h b/src/hal/unix/omvhalmath.h
index afd28823..c53843d4 100644
--- a/src/hal/unix/omvhalmath.h
+++ b/src/hal/unix/omvhalmath.h
@@ -16,8 +16,8 @@
 #define fast_ceilf  (int)ceilf
 #define fast_atanf  atanf
 
-#define arm_sin_f32 sin
-#define arm_cos_f32 cos
+// #define arm_sin_f32 sin
+// #define arm_cos_f32 cos
 
 #define sinhf       sinh
 
diff --git a/src/omv/alloc/unaligned_memcpy.c b/src/omv/alloc/unaligned_memcpy.c
index 7cff1e98..afb03477 100644
--- a/src/omv/alloc/unaligned_memcpy.c
+++ b/src/omv/alloc/unaligned_memcpy.c
@@ -1,6 +1,7 @@
 #include <stdint.h>
 #include <string.h>
-#include "cmsis_gcc.h"
+// #include "cmsis_gcc.h"
+#include "imlib.h"
 #include "unaligned_memcpy.h"
 
 // ARM Cortex-M4/M7 Processors can access memory using unaligned 32-bit reads/writes.
diff --git a/src/omv/boards/MAIX3/omv_boardconfig.h b/src/omv/boards/MAIX3/omv_boardconfig.h
index 10b97bd4..d8b03bf1 100644
--- a/src/omv/boards/MAIX3/omv_boardconfig.h
+++ b/src/omv/boards/MAIX3/omv_boardconfig.h
@@ -14,7 +14,7 @@
 // Architecture info
 #define OMV_ARCH_STR                        "MAIX3"  // 33 chars max
 #define OMV_BOARD_TYPE                      "MAIX3"
-// #define OMV_UNIQUE_ID_ADDR      0x1FF1E800
+#define OMV_UNIQUE_ID_ADDR                  0x1FF1E800
 // #define OMV_UNIQUE_ID_SIZE      3 // 3 words
 
 // // Needed by the SWD JTAG testrig - located at the bottom of the frame buffer stack.
@@ -150,12 +150,12 @@
 // #define OMV_MAIN_MEMORY         SRAM1       // data, bss and heap memory
 // #define OMV_STACK_MEMORY        ITCM        // stack memory
 // #define OMV_DMA_MEMORY          SRAM2       // DMA buffers memory.
-// #define OMV_FB_MEMORY           AXI_SRAM    // Framebuffer, fb_alloc
+#define OMV_FB_MEMORY                       AXI_SRAM  // Framebuffer, fb_alloc
 // #define OMV_JPEG_MEMORY         SRAM3       // JPEG buffer memory.
 // #define OMV_VOSPI_MEMORY        SRAM4       // VoSPI buffer memory.
 
-// #define OMV_FB_SIZE             (400K)      // FB memory: header + VGA/GS image
-// #define OMV_FB_ALLOC_SIZE       (100K)      // minimum fb alloc size
+#define OMV_FB_SIZE                         (400K)  // FB memory: header + VGA/GS image
+#define OMV_FB_ALLOC_SIZE                   (100K)  // minimum fb alloc size
 // #define OMV_STACK_SIZE          (64K)
 // #define OMV_HEAP_SIZE           (229K)
 
@@ -180,8 +180,8 @@
 // #define OMV_SRAM3_LENGTH        32K
 // #define OMV_SRAM4_ORIGIN        0x38000000
 // #define OMV_SRAM4_LENGTH        64K
-// #define OMV_AXI_SRAM_ORIGIN     0x24000000
-// #define OMV_AXI_SRAM_LENGTH     512K
+#define OMV_AXI_SRAM_ORIGIN                 0x240000000
+#define OMV_AXI_SRAM_LENGTH                 512M
 
 // // Flash configuration.
 // #define OMV_FLASH_FFS_ORIGIN    0x08020000
diff --git a/src/omv/common/mutex.c b/src/omv/common/mutex.c
index b6b50052..7fc072ca 100644
--- a/src/omv/common/mutex.c
+++ b/src/omv/common/mutex.c
@@ -17,6 +17,11 @@
 // #include "cmsis_gcc.h"
 #include "py/mphal.h"
 
+#define __DMB()          // TODO need to be supplemented
+#define __disable_irq()  // TODO need to be supplemented
+#define __enable_irq()   // TODO need to be supplemented
+#define __WFI()          // TODO need to be supplemented
+
 void mutex_init0(omv_mutex_t *mutex)
 {
     __DMB();
diff --git a/src/omv/common/trace.c b/src/omv/common/trace.c
index e097ab04..85872d09 100644
--- a/src/omv/common/trace.c
+++ b/src/omv/common/trace.c
@@ -9,9 +9,12 @@
  * Trace buffer.
  */
 #include <stdint.h>
-#include "cmsis_gcc.h"
+// #include "cmsis_gcc.h"
 #include "trace.h"
 
+#define __disable_irq()  // TODO need to be supplemented
+#define __enable_irq()   // TODO need to be supplemented
+
 #define TRACEBUF_SIZE   (256)
 typedef struct _tracebuf_t {
     uint8_t idx;
diff --git a/src/omv/common/usbdbg.c b/src/omv/common/usbdbg.c
index ff934610..754e62ab 100644
--- a/src/omv/common/usbdbg.c
+++ b/src/omv/common/usbdbg.c
@@ -15,7 +15,7 @@
 #include "py/mphal.h"
 #include "py/obj.h"
 #include "py/runtime.h"
-#include "pendsv.h"
+// #include "pendsv.h"
 
 #include "imlib.h"
 #if MICROPY_PY_SENSOR
@@ -78,12 +78,12 @@ void usbdbg_set_script_running(bool running)
 
 inline void usbdbg_set_irq_enabled(bool enabled)
 {
-    if (enabled) {
-        NVIC_EnableIRQ(OMV_USB_IRQN);
-    } else {
-        NVIC_DisableIRQ(OMV_USB_IRQN);
-    }
-    __DSB(); __ISB();
+    // if (enabled) {
+    //     NVIC_EnableIRQ(OMV_USB_IRQN);
+    // } else {
+    //     NVIC_DisableIRQ(OMV_USB_IRQN);
+    // }
+    // __DSB(); __ISB();
     irq_enabled = enabled;
 }
 
@@ -94,359 +94,359 @@ bool usbdbg_get_irq_enabled()
 
 void usbdbg_data_in(void *buffer, int length)
 {
-    switch (cmd) {
-        case USBDBG_FW_VERSION: {
-            uint32_t *ver_buf = buffer;
-            ver_buf[0] = FIRMWARE_VERSION_MAJOR;
-            ver_buf[1] = FIRMWARE_VERSION_MINOR;
-            ver_buf[2] = FIRMWARE_VERSION_PATCH;
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_TX_BUF_LEN: {
-            uint32_t tx_buf_len = usb_cdc_buf_len();
-            memcpy(buffer, &tx_buf_len, sizeof(tx_buf_len));
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_SENSOR_ID: {
-            int sensor_id = 0xFF;
-            #if MICROPY_PY_SENSOR
-            if (sensor_is_detected() == true) {
-                sensor_id = sensor_get_id();
-            }
-            #endif
-            memcpy(buffer, &sensor_id, 4);
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_TX_BUF: {
-            xfer_bytes += usb_cdc_get_buf(buffer, length);
-            if (xfer_bytes == xfer_length) {
-                cmd = USBDBG_NONE;
-            }
-            break;
-        }
-
-        case USBDBG_FRAME_SIZE:
-            // Return 0 if FB is locked or not ready.
-            ((uint32_t*)buffer)[0] = 0;
-            // Try to lock FB. If header size == 0 frame is not ready
-            if (mutex_try_lock_alternate(&JPEG_FB()->lock, MUTEX_TID_IDE)) {
-                // If header size == 0 frame is not ready
-                if (JPEG_FB()->size == 0) {
-                    // unlock FB
-                    mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
-                } else {
-                    // Return header w, h and size/bpp
-                    ((uint32_t*)buffer)[0] = JPEG_FB()->w;
-                    ((uint32_t*)buffer)[1] = JPEG_FB()->h;
-                    ((uint32_t*)buffer)[2] = JPEG_FB()->size;
-                }
-            }
-            cmd = USBDBG_NONE;
-            break;
-
-        case USBDBG_FRAME_DUMP:
-            if (xfer_bytes < xfer_length) {
-                memcpy(buffer, JPEG_FB()->pixels+xfer_bytes, length);
-                xfer_bytes += length;
-                if (xfer_bytes == xfer_length) {
-                    cmd = USBDBG_NONE;
-                    JPEG_FB()->w = 0; JPEG_FB()->h = 0; JPEG_FB()->size = 0;
-                    mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
-                }
-            }
-            break;
-
-        case USBDBG_ARCH_STR: {
-            unsigned int uid[3] = {
-            #if (OMV_UNIQUE_ID_SIZE == 2)
-                0U,
-            #else
-                *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 8)),
-            #endif
-                *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 4)),
-                *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 0)),
-            };
-            snprintf((char *) buffer, 64, "%s [%s:%08X%08X%08X]",
-                    OMV_ARCH_STR, OMV_BOARD_TYPE, uid[0], uid[1], uid[2]);
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_SCRIPT_RUNNING: {
-            uint32_t *buf = buffer;
-            buf[0] = (uint32_t) script_running;
-            cmd = USBDBG_NONE;
-            break;
-        }
-        default: /* error */
-            break;
-    }
+    // switch (cmd) {
+    //     case USBDBG_FW_VERSION: {
+    //         uint32_t *ver_buf = buffer;
+    //         ver_buf[0] = FIRMWARE_VERSION_MAJOR;
+    //         ver_buf[1] = FIRMWARE_VERSION_MINOR;
+    //         ver_buf[2] = FIRMWARE_VERSION_PATCH;
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_TX_BUF_LEN: {
+    //         uint32_t tx_buf_len = usb_cdc_buf_len();
+    //         memcpy(buffer, &tx_buf_len, sizeof(tx_buf_len));
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_SENSOR_ID: {
+    //         int sensor_id = 0xFF;
+    //         #if MICROPY_PY_SENSOR
+    //         if (sensor_is_detected() == true) {
+    //             sensor_id = sensor_get_id();
+    //         }
+    //         #endif
+    //         memcpy(buffer, &sensor_id, 4);
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_TX_BUF: {
+    //         xfer_bytes += usb_cdc_get_buf(buffer, length);
+    //         if (xfer_bytes == xfer_length) {
+    //             cmd = USBDBG_NONE;
+    //         }
+    //         break;
+    //     }
+
+    //     case USBDBG_FRAME_SIZE:
+    //         // Return 0 if FB is locked or not ready.
+    //         ((uint32_t*)buffer)[0] = 0;
+    //         // Try to lock FB. If header size == 0 frame is not ready
+    //         if (mutex_try_lock_alternate(&JPEG_FB()->lock, MUTEX_TID_IDE)) {
+    //             // If header size == 0 frame is not ready
+    //             if (JPEG_FB()->size == 0) {
+    //                 // unlock FB
+    //                 mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
+    //             } else {
+    //                 // Return header w, h and size/bpp
+    //                 ((uint32_t*)buffer)[0] = JPEG_FB()->w;
+    //                 ((uint32_t*)buffer)[1] = JPEG_FB()->h;
+    //                 ((uint32_t*)buffer)[2] = JPEG_FB()->size;
+    //             }
+    //         }
+    //         cmd = USBDBG_NONE;
+    //         break;
+
+    //     case USBDBG_FRAME_DUMP:
+    //         if (xfer_bytes < xfer_length) {
+    //             memcpy(buffer, JPEG_FB()->pixels+xfer_bytes, length);
+    //             xfer_bytes += length;
+    //             if (xfer_bytes == xfer_length) {
+    //                 cmd = USBDBG_NONE;
+    //                 JPEG_FB()->w = 0; JPEG_FB()->h = 0; JPEG_FB()->size = 0;
+    //                 mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
+    //             }
+    //         }
+    //         break;
+
+    //     case USBDBG_ARCH_STR: {
+    //         unsigned int uid[3] = {
+    //         #if (OMV_UNIQUE_ID_SIZE == 2)
+    //             0U,
+    //         #else
+    //             *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 8)),
+    //         #endif
+    //             *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 4)),
+    //             *((unsigned int *) (OMV_UNIQUE_ID_ADDR + 0)),
+    //         };
+    //         snprintf((char *) buffer, 64, "%s [%s:%08X%08X%08X]",
+    //                 OMV_ARCH_STR, OMV_BOARD_TYPE, uid[0], uid[1], uid[2]);
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_SCRIPT_RUNNING: {
+    //         uint32_t *buf = buffer;
+    //         buf[0] = (uint32_t) script_running;
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+    //     default: /* error */
+    //         break;
+    // }
 }
 
 void usbdbg_data_out(void *buffer, int length)
 {
-    switch (cmd) {
-        case USBDBG_FB_ENABLE: {
-            uint32_t enable = *((int32_t*)buffer);
-            JPEG_FB()->enabled = enable;
-            if (enable == 0) {
-                // When disabling framebuffer, the IDE might still be holding FB lock.
-                // If the IDE is not the current lock owner, this operation is ignored.
-                mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
-            }
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_SCRIPT_EXEC:
-            // check if GC is locked before allocating memory for vstr. If GC was locked
-            // at least once before the script is fully uploaded xfer_bytes will be less
-            // than the total length (xfer_length) and the script will Not be executed.
-            if (!script_running && !gc_is_locked()) {
-                vstr_add_strn(&script_buf, buffer, length);
-                xfer_bytes += length;
-                if (xfer_bytes == xfer_length) {
-                    // Set script ready flag
-                    script_ready = true;
-
-                    // Set script running flag
-                    script_running = true;
-
-                    // Disable IDE IRQ (re-enabled by pyexec or main).
-                    usbdbg_set_irq_enabled(false);
-
-                    // Clear interrupt traceback
-                    mp_obj_exception_clear_traceback(mp_const_ide_interrupt);
-
-                    // Remove the BASEPRI masking (if any)
-                    __set_BASEPRI(0);
-
-                    // Interrupt running REPL
-                    // Note: setting pendsv explicitly here because the VM is probably
-                    // waiting in REPL and the soft interrupt flag will not be checked.
-                    pendsv_nlr_jump(mp_const_ide_interrupt);
-                }
-            }
-            break;
-
-        case USBDBG_TEMPLATE_SAVE: {
-            #if defined(IMLIB_ENABLE_IMAGE_FILE_IO)
-            image_t image;
-            framebuffer_init_image(&image);
-
-            // null terminate the path
-            length = (length == 64) ? 63:length;
-            ((char*)buffer)[length] = 0;
-
-            rectangle_t *roi = (rectangle_t*)buffer;
-            char *path = (char*)buffer+sizeof(rectangle_t);
-
-            imlib_save_image(&image, path, roi, 50);
-
-            // raise a flash IRQ to flush image
-            //NVIC->STIR = FLASH_IRQn;
-            #endif  //IMLIB_ENABLE_IMAGE_FILE_IO
-            break;
-        }
-
-        case USBDBG_DESCRIPTOR_SAVE: {
-            #if defined(IMLIB_ENABLE_IMAGE_FILE_IO)\
-                && defined(IMLIB_ENABLE_KEYPOINTS)
-            image_t image;
-            framebuffer_init_image(&image);
-
-            // null terminate the path
-            length = (length == 64) ? 63:length;
-            ((char*)buffer)[length] = 0;
-
-            rectangle_t *roi = (rectangle_t*)buffer;
-            char *path = (char*)buffer+sizeof(rectangle_t);
-
-            py_image_descriptor_from_roi(&image, path, roi);
-            #endif  //IMLIB_ENABLE_IMAGE_FILE_IO && IMLIB_ENABLE_KEYPOINTS
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_ATTR_WRITE: {
-            #if MICROPY_PY_SENSOR
-            /* write sensor attribute */
-            int32_t attr= *((int32_t*)buffer);
-            int32_t val = *((int32_t*)buffer+1);
-            switch (attr) {
-                case ATTR_CONTRAST:
-                    sensor_set_contrast(val);
-                    break;
-                case ATTR_BRIGHTNESS:
-                    sensor_set_brightness(val);
-                    break;
-                case ATTR_SATURATION:
-                    sensor_set_saturation(val);
-                    break;
-                case ATTR_GAINCEILING:
-                    sensor_set_gainceiling(val);
-                    break;
-                default:
-                    break;
-            }
-            #endif
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_SET_TIME: {
-            // TODO implement
-            #if 0
-            uint32_t *timebuf = (uint32_t*)buffer;
-            timebuf[0];   // Year
-            timebuf[1];   // Month
-            timebuf[2];   // Day
-            timebuf[3];   // Day of the week
-            timebuf[4];   // Hour
-            timebuf[5];   // Minute
-            timebuf[6];   // Second
-            timebuf[7];   // Milliseconds
-            #endif
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        case USBDBG_TX_INPUT: {
-            // TODO implement
-            #if 0
-            uint32_t key= *((uint32_t*)buffer);
-            #endif
-            cmd = USBDBG_NONE;
-            break;
-        }
-
-        default: /* error */
-            break;
-    }
+    // switch (cmd) {
+    //     case USBDBG_FB_ENABLE: {
+    //         uint32_t enable = *((int32_t*)buffer);
+    //         JPEG_FB()->enabled = enable;
+    //         if (enable == 0) {
+    //             // When disabling framebuffer, the IDE might still be holding FB lock.
+    //             // If the IDE is not the current lock owner, this operation is ignored.
+    //             mutex_unlock(&JPEG_FB()->lock, MUTEX_TID_IDE);
+    //         }
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_SCRIPT_EXEC:
+    //         // check if GC is locked before allocating memory for vstr. If GC was locked
+    //         // at least once before the script is fully uploaded xfer_bytes will be less
+    //         // than the total length (xfer_length) and the script will Not be executed.
+    //         if (!script_running && !gc_is_locked()) {
+    //             vstr_add_strn(&script_buf, buffer, length);
+    //             xfer_bytes += length;
+    //             if (xfer_bytes == xfer_length) {
+    //                 // Set script ready flag
+    //                 script_ready = true;
+
+    //                 // Set script running flag
+    //                 script_running = true;
+
+    //                 // Disable IDE IRQ (re-enabled by pyexec or main).
+    //                 usbdbg_set_irq_enabled(false);
+
+    //                 // Clear interrupt traceback
+    //                 mp_obj_exception_clear_traceback(mp_const_ide_interrupt);
+
+    //                 // Remove the BASEPRI masking (if any)
+    //                 __set_BASEPRI(0);
+
+    //                 // Interrupt running REPL
+    //                 // Note: setting pendsv explicitly here because the VM is probably
+    //                 // waiting in REPL and the soft interrupt flag will not be checked.
+    //                 pendsv_nlr_jump(mp_const_ide_interrupt);
+    //             }
+    //         }
+    //         break;
+
+    //     case USBDBG_TEMPLATE_SAVE: {
+    //         #if defined(IMLIB_ENABLE_IMAGE_FILE_IO)
+    //         image_t image;
+    //         framebuffer_init_image(&image);
+
+    //         // null terminate the path
+    //         length = (length == 64) ? 63:length;
+    //         ((char*)buffer)[length] = 0;
+
+    //         rectangle_t *roi = (rectangle_t*)buffer;
+    //         char *path = (char*)buffer+sizeof(rectangle_t);
+
+    //         imlib_save_image(&image, path, roi, 50);
+
+    //         // raise a flash IRQ to flush image
+    //         //NVIC->STIR = FLASH_IRQn;
+    //         #endif  //IMLIB_ENABLE_IMAGE_FILE_IO
+    //         break;
+    //     }
+
+    //     case USBDBG_DESCRIPTOR_SAVE: {
+    //         #if defined(IMLIB_ENABLE_IMAGE_FILE_IO)\
+    //             && defined(IMLIB_ENABLE_KEYPOINTS)
+    //         image_t image;
+    //         framebuffer_init_image(&image);
+
+    //         // null terminate the path
+    //         length = (length == 64) ? 63:length;
+    //         ((char*)buffer)[length] = 0;
+
+    //         rectangle_t *roi = (rectangle_t*)buffer;
+    //         char *path = (char*)buffer+sizeof(rectangle_t);
+
+    //         py_image_descriptor_from_roi(&image, path, roi);
+    //         #endif  //IMLIB_ENABLE_IMAGE_FILE_IO && IMLIB_ENABLE_KEYPOINTS
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_ATTR_WRITE: {
+    //         #if MICROPY_PY_SENSOR
+    //         /* write sensor attribute */
+    //         int32_t attr= *((int32_t*)buffer);
+    //         int32_t val = *((int32_t*)buffer+1);
+    //         switch (attr) {
+    //             case ATTR_CONTRAST:
+    //                 sensor_set_contrast(val);
+    //                 break;
+    //             case ATTR_BRIGHTNESS:
+    //                 sensor_set_brightness(val);
+    //                 break;
+    //             case ATTR_SATURATION:
+    //                 sensor_set_saturation(val);
+    //                 break;
+    //             case ATTR_GAINCEILING:
+    //                 sensor_set_gainceiling(val);
+    //                 break;
+    //             default:
+    //                 break;
+    //         }
+    //         #endif
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_SET_TIME: {
+    //         // TODO implement
+    //         #if 0
+    //         uint32_t *timebuf = (uint32_t*)buffer;
+    //         timebuf[0];   // Year
+    //         timebuf[1];   // Month
+    //         timebuf[2];   // Day
+    //         timebuf[3];   // Day of the week
+    //         timebuf[4];   // Hour
+    //         timebuf[5];   // Minute
+    //         timebuf[6];   // Second
+    //         timebuf[7];   // Milliseconds
+    //         #endif
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     case USBDBG_TX_INPUT: {
+    //         // TODO implement
+    //         #if 0
+    //         uint32_t key= *((uint32_t*)buffer);
+    //         #endif
+    //         cmd = USBDBG_NONE;
+    //         break;
+    //     }
+
+    //     default: /* error */
+    //         break;
+    // }
 }
 
 void usbdbg_control(void *buffer, uint8_t request, uint32_t length)
 {
-    cmd = (enum usbdbg_cmd) request;
-    switch (cmd) {
-        case USBDBG_FW_VERSION:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_FRAME_SIZE:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_FRAME_DUMP:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_ARCH_STR:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_SCRIPT_EXEC:
-            xfer_bytes = 0;
-            xfer_length = length;
-            vstr_reset(&script_buf);
-            break;
-
-        case USBDBG_SCRIPT_STOP:
-            if (script_running) {
-                // Set script running flag
-                script_running = false;
-
-                // Disable IDE IRQ (re-enabled by pyexec or main).
-                usbdbg_set_irq_enabled(false);
-
-                // Reset CDC buffers after disabling IRQs.
-                usb_cdc_reset_buffers();
-
-                // interrupt running code by raising an exception
-                mp_obj_exception_clear_traceback(mp_const_ide_interrupt);
-
-                // Remove the BASEPRI masking (if any)
-                __set_BASEPRI(0);
-
-                pendsv_nlr_jump(mp_const_ide_interrupt);
-            }
-            cmd = USBDBG_NONE;
-            break;
-
-        case USBDBG_SCRIPT_SAVE:
-            // TODO: save running script
-            cmd = USBDBG_NONE;
-            break;
-
-        case USBDBG_SCRIPT_RUNNING:
-            xfer_bytes = 0;
-            xfer_length =length;
-            break;
-
-        case USBDBG_TEMPLATE_SAVE:
-        case USBDBG_DESCRIPTOR_SAVE:
-            /* save template */
-            xfer_bytes = 0;
-            xfer_length =length;
-            break;
-
-        case USBDBG_ATTR_WRITE:
-            xfer_bytes = 0;
-            xfer_length =length;
-            break;
-
-        case USBDBG_SYS_RESET:
-            NVIC_SystemReset();
-            break;
-
-        case USBDBG_SYS_RESET_TO_BL:{
-            #if defined(MICROPY_RESET_TO_BOOTLOADER)
-            MICROPY_RESET_TO_BOOTLOADER();
-            #else
-            NVIC_SystemReset();
-            #endif
-            break;
-        }
-
-        case USBDBG_FB_ENABLE: {
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-        }
-
-        case USBDBG_TX_BUF:
-        case USBDBG_TX_BUF_LEN:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_SENSOR_ID:
-            xfer_bytes = 0;
-            xfer_length = length;
-            break;
-
-        case USBDBG_SET_TIME:
-            xfer_bytes = 0;
-            xfer_length =length;
-            break;
-
-        case USBDBG_TX_INPUT:
-            xfer_bytes = 0;
-            xfer_length =length;
-            break;
-
-        default: /* error */
-            cmd = USBDBG_NONE;
-            break;
-    }
+    // cmd = (enum usbdbg_cmd) request;
+    // switch (cmd) {
+    //     case USBDBG_FW_VERSION:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_FRAME_SIZE:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_FRAME_DUMP:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_ARCH_STR:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_SCRIPT_EXEC:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         vstr_reset(&script_buf);
+    //         break;
+
+    //     case USBDBG_SCRIPT_STOP:
+    //         if (script_running) {
+    //             // Set script running flag
+    //             script_running = false;
+
+    //             // Disable IDE IRQ (re-enabled by pyexec or main).
+    //             usbdbg_set_irq_enabled(false);
+
+    //             // Reset CDC buffers after disabling IRQs.
+    //             usb_cdc_reset_buffers();
+
+    //             // interrupt running code by raising an exception
+    //             mp_obj_exception_clear_traceback(mp_const_ide_interrupt);
+
+    //             // Remove the BASEPRI masking (if any)
+    //             __set_BASEPRI(0);
+
+    //             pendsv_nlr_jump(mp_const_ide_interrupt);
+    //         }
+    //         cmd = USBDBG_NONE;
+    //         break;
+
+    //     case USBDBG_SCRIPT_SAVE:
+    //         // TODO: save running script
+    //         cmd = USBDBG_NONE;
+    //         break;
+
+    //     case USBDBG_SCRIPT_RUNNING:
+    //         xfer_bytes = 0;
+    //         xfer_length =length;
+    //         break;
+
+    //     case USBDBG_TEMPLATE_SAVE:
+    //     case USBDBG_DESCRIPTOR_SAVE:
+    //         /* save template */
+    //         xfer_bytes = 0;
+    //         xfer_length =length;
+    //         break;
+
+    //     case USBDBG_ATTR_WRITE:
+    //         xfer_bytes = 0;
+    //         xfer_length =length;
+    //         break;
+
+    //     case USBDBG_SYS_RESET:
+    //         NVIC_SystemReset();
+    //         break;
+
+    //     case USBDBG_SYS_RESET_TO_BL:{
+    //         #if defined(MICROPY_RESET_TO_BOOTLOADER)
+    //         MICROPY_RESET_TO_BOOTLOADER();
+    //         #else
+    //         NVIC_SystemReset();
+    //         #endif
+    //         break;
+    //     }
+
+    //     case USBDBG_FB_ENABLE: {
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+    //     }
+
+    //     case USBDBG_TX_BUF:
+    //     case USBDBG_TX_BUF_LEN:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_SENSOR_ID:
+    //         xfer_bytes = 0;
+    //         xfer_length = length;
+    //         break;
+
+    //     case USBDBG_SET_TIME:
+    //         xfer_bytes = 0;
+    //         xfer_length =length;
+    //         break;
+
+    //     case USBDBG_TX_INPUT:
+    //         xfer_bytes = 0;
+    //         xfer_length =length;
+    //         break;
+
+    //     default: /* error */
+    //         cmd = USBDBG_NONE;
+    //         break;
+    // }
 }
diff --git a/src/omv/imlib/apriltag.c b/src/omv/imlib/apriltag.c
index 445caec6..c5cadc40 100644
--- a/src/omv/imlib/apriltag.c
+++ b/src/omv/imlib/apriltag.c
@@ -81,8 +81,8 @@ either expressed or implied, of the Regents of The University of Michigan.
 #define log2(x) fast_log2(x)
 #undef log2f
 #define log2f(x) fast_log2(x)
-#define sin(x) arm_sin_f32(x)
-#define cos(x) arm_cos_f32(x)
+// #define sin(x) arm_sin_f32(x)
+// #define cos(x) arm_cos_f32(x)
 #define fmin(a, b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })
 #define fminf(a, b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })
 #define fmax(a, b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a > _b ? _a : _b; })
diff --git a/src/omv/imlib/imlib.h b/src/omv/imlib/imlib.h
index 48f3684c..9f30b6bb 100644
--- a/src/omv/imlib/imlib.h
+++ b/src/omv/imlib/imlib.h
@@ -1358,4 +1358,60 @@ void imlib_phasecorrelate(image_t *img0, image_t *img1, rectangle_t *roi0, recta
 void imlib_stereo_disparity(image_t *img, bool reversed, int max_disparity, int threshold);
 
 array_t *imlib_selective_search(image_t *src, float t, int min_size, float a1, float a2, float a3);
+
+static inline uint32_t __USAT_ASR(int32_t val, uint32_t sat, uint32_t shift)
+{
+    val >>= shift & 0x1F;
+
+    if (sat <= 31U) {
+        const uint32_t max = ((1U << sat) - 1U);
+        if (val > (int32_t)max) {
+            return max;
+        }
+        else if (val < 0) {
+            return 0U;
+        }
+    }
+    return (uint32_t)val;
+}
+
+static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
+{
+    return ((op1 & 0xFFFF0000) - (op2 & 0xFFFF0000)) | ((op1 - op2) & 0xFFFF);
+}
+
+static inline uint32_t __USAT16(int32_t val, uint32_t sat)
+{
+    if (sat <= 15U) {
+        const uint32_t max   = ((1U << sat) - 1U);
+        int32_t        valHi = val >> 16;
+        if (valHi > (int32_t)max) {
+            valHi = max;
+        }
+        else if (valHi < 0) {
+            valHi = 0U;
+        }
+        int32_t valLo = (val << 16) >> 16;
+        if (valLo > (int32_t)max) {
+            valLo = max;
+        }
+        else if (valLo < 0) {
+            valLo = 0U;
+        }
+        return (valHi << 16) | valLo;
+    }
+    return (uint32_t)val;
+}
+
+static inline uint32_t __UXTB_RORn(uint32_t op1, uint32_t rotate)
+{
+    return (op1 >> rotate) & 0xFF;
+}
+
+static inline uint32_t __REV16(uint32_t value)
+{
+    return (uint32_t)((((uint32_t)(value)&0xff000000) >> 8) | (((uint32_t)(value)&0x00ff0000) << 8) |
+                      (((uint32_t)(value)&0x0000ff00) >> 8) | (((uint32_t)(value)&0x000000ff) << 8));
+}
+
 #endif //__IMLIB_H__
diff --git a/src/omv/imlib/kmeans.c b/src/omv/imlib/kmeans.c
index 37d8285f..b81bc58d 100644
--- a/src/omv/imlib/kmeans.c
+++ b/src/omv/imlib/kmeans.c
@@ -18,6 +18,8 @@
 
 extern uint32_t rng_randint(uint32_t min, uint32_t max);
 
+#define rng_randint(X, Y) rand()
+
 static cluster_t *cluster_alloc(int cx, int cy)
 {
     cluster_t *c=NULL;
-- 
2.33.1.windows.1

